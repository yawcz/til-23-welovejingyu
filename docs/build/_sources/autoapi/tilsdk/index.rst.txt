:py:mod:`tilsdk`
================

.. py:module:: tilsdk


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   cv/index.rst
   localization/index.rst
   mock_robomaster/index.rst
   reporting/index.rst
   utilities/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   tilsdk.GridLocation
   tilsdk.GridPose
   tilsdk.LocalizationService
   tilsdk.RealLocation
   tilsdk.RealPose
   tilsdk.RealPose
   tilsdk.ReportingService
   tilsdk.SignedDistanceGrid



Functions
~~~~~~~~~

.. autoapisummary::

   tilsdk.euclidean_distance
   tilsdk.grid_to_real
   tilsdk.real_to_grid
   tilsdk.real_to_grid_exact
   tilsdk.save_zip
   tilsdk.validate_reid_submission
   tilsdk.validate_speakerid_submission



Attributes
~~~~~~~~~~

.. autoapisummary::

   tilsdk.BoundingBox
   tilsdk.DetectedObject


.. py:data:: BoundingBox

   Bounding box (bbox).

   .. py:attribute:: x
       :type: float

       bbox center x-coordinate.

   .. py:attribute:: y
       :type: float

       bbox center y-coordinate.

   .. py:attribute:: w
       :type: float

       bbox width.

   .. py:attribute:: h
       :type: float

       bbox height.

.. py:data:: DetectedObject

   Detected target object.

   .. py:attribute:: id

       Unique target id.

   .. py:attribute:: cls

       Target classification.

   .. py:attribute:: bbox
       :type: BoundingBox

       Bounding box of target.

.. py:class:: GridLocation


   Bases: :py:obj:`NamedTuple`

   Pixel coordinates (x, y)

   .. py:attribute:: x
      :type: int

      X-coordinate.

   .. py:attribute:: y
      :type: int

      Y-coordinate.


.. py:class:: GridPose


   Bases: :py:obj:`NamedTuple`

   Pixel coordinates (x, y, z) where z is angle from x-axis in deg.

   .. py:attribute:: x
      :type: int

      X-coordinate.

   .. py:attribute:: y
      :type: int

      Y-coordinate.

   .. py:attribute:: z
      :type: float

      Heading angle (rel. x-axis) in degrees.


.. py:class:: LocalizationService(host = 'localhost', port = 5566)


   Communicates with localization server to obtain the arena's static map and the robot's estimated pose.


   :param host: Hostname or IP address of localization server.
   :type host: str
   :param port: Port number of localization server.
   :type port: int

   .. py:method:: get_map()

      Get a grid-based representation of the of the map.

      Grid elements are square and represented by a float. Value indicates distance from nearest
      obstacle. Value <= 0 indicates occupied, > 0 indicates passable.
      Grid is centered-aligned, i.e. real-world postion maps to center of grid square.

      :returns: **grid** -- Signed distance grid.
      :rtype: SignedDistanceGrid


   .. py:method:: get_pose()

      Get real-world pose of robot.

      :returns: **pose** -- Pose of robot.
      :rtype: RealPose



.. py:class:: RealLocation


   Bases: :py:obj:`NamedTuple`

   Pixel coordinates (x, y)

   .. py:attribute:: x
      :type: float

      X-coordinate.

   .. py:attribute:: y
      :type: float

      Y-coordinate.


.. py:class:: RealPose


   Bases: :py:obj:`NamedTuple`

   Real coordinates (x, y, z) where z is angle from x-axis in deg.

   .. py:attribute:: x
      :type: float

      X-coordinate.

   .. py:attribute:: y
      :type: float

      Y-coordinate.

   .. py:attribute:: z
      :type: float

      Heading angle (rel. x-axis) in degrees.


.. py:class:: RealPose


   Bases: :py:obj:`NamedTuple`

   Real coordinates (x, y, z) where z is angle from x-axis in deg.

   .. py:attribute:: x
      :type: float

      X-coordinate.

   .. py:attribute:: y
      :type: float

      Y-coordinate.

   .. py:attribute:: z
      :type: float

      Heading angle (rel. x-axis) in degrees.


.. py:class:: ReportingService(host = 'localhost', port = 5000)


   Communicates with reporting server to submit reports.

   :param host: Hostname or IP address of reporting server.
   :param port: Port number of reporting server.

   .. py:method:: check_pose(pose)

      Checks the status of the ``pose``.

      :returns: "Goal Reached" if pose is considered near enough to maze's end goal.
                "Task Checkpoint Reached" if pose is near enough to Task Checkpoint.
                "Not An Expected Checkpoint" if ``pose`` is not a goal, task or detour checkpoint.
                A RealPose of (x, y, heading in degrees) representing the next checkpoint if ``pose`` is a detour checkpoint.
      :rtype: str or RealPose


   .. py:method:: end_run()

      Tells the scoring server that the robot is terminating its run.
      Call this **only** after receiving confirmation from the scoring server that you
      have reached the maze goal.


   .. py:method:: report_audio(pose, answer, save_dir)

      Report answer for the Friend or Foe (Audio) task.

      :param pose: Robot's pose at the time when this corresponding checkpoint's task was being done.
      :type pose: RealPose
      :param answer: Answer for the Friend or Foe (Audio) task.
                     The expected format is <Filename of Audio File w/o file extension>_<Team Name>_<Member ID>
                     e.g. "audio1_My Team Name is Great_MemberA".
      :type answer: str
      :param save_dir: The directory for saving a returned folder of audio files into. The Reporting server
                       returns some audio files for the next task, "Decoding Digits".
      :type save_dir: str or Path

      :returns: **save_path** -- The path to the folder of contents retrieved from the server.
      :rtype: str


   .. py:method:: report_digit(pose, answer)

      Report answer for the Decoding Digits task.

      :param pose: Robot pose where targets were seen.
      :type pose: RealPose
      :param answer: A tuple of digits representing the digits decoded from a series of audio files.
      :type answer: Tuple

      :returns: **pose** -- Target pose of the next checkpoint.
      :rtype: RealPose


   .. py:method:: report_situation(img, pose, answer, save_dir)

      Report answer for the Friend or Foe (Visual) task, namely the situation about
      whether 'hostage' or 'suspect' is in the scene. This method will attempt to receive
      a zipped folder from the Reporting Server and unzip and save the folder into the
      ``save_dir``.

      :param img: cv2 image taken by robot and drawn with bounding boxes of detected objects.
      :type img: ndarray
      :param pose: Robot's pose at the time when this picture was taken.
      :type pose: RealPose
      :param answer: Who is in the scene: "hostage", "suspect" or "none".
      :type answer: str
      :param save_dir: The directory for saving the returned folder of audio files into.
                       The Reporting server returns some audio files for the next task,
                       "Friend or Foe (Audio)".
      :type save_dir: str or Path

      :returns: **save_path** -- The path to the folder of contents retrieved from the server.
      :rtype: str


   .. py:method:: start_run()

      Inform scoring server that the robot is starting the run.
      This **must** be called before making submissions to the scoring server and before the
      robot starts moving.


      :returns: **response** -- http response.
      :rtype: Flask.response



.. py:class:: SignedDistanceGrid(width = 0, height = 0, grid = None, scale = 1.0)


   Grid map representation.

   Grid elements are square and represented by a float.
   Value indicates distance from nearest obstacle.
   Value <= 0 indicates occupied, > 0 indicates passable.

   Grid is centered-aligned, i.e. real-world postion
   corresponds to center of grid square.

   :param width: Width of map in number of grid elements, corresponding to real-world x-axis. Ignored if grid parameter is specified.
   :type width: int
   :param height: Height of map in number of grid elements, corresponding to real-world y-axis. Ignored if grid parameter is specified.
   :type height: int
   :param grid: Numpy array of grid data, corresponding to a grid of width m and heigh n.
   :type grid: nxm ArrayLike
   :param scale: Ratio of real-world unit to grid unit.
   :type scale: float

   .. py:method:: dilated(distance)

      Dilate obstacles in the grid in the north, south, east and west directions by `distance`.

      :param distance: Size of dilation in terms of **real** units.
      :type distance: float

      :returns: Grid with dilated obstacles.
      :rtype: SignedDistanceGrid


   .. py:method:: from_image(img, scale = 1.0)
      :staticmethod:

      Factory method to create map from image.

      Only the first channel is used. Channel value should be 0 where passable.

      :param img: Input image.
      :type img: Any
      :param scale: Ratio of real-world unit to grid unit.
      :type scale: float

      :returns: **map**
      :rtype: SignedDistanceGrid


   .. py:method:: grid_to_real(id)

      Convert grid coordinates to real coordinates.

      :param id: Input location.
      :type id: GridLocation

      :returns: Corresponding RealLocation.
      :rtype: RealLocation


   .. py:method:: in_bounds(id)

      Check if grid location is in bounds.

      :param id: Input location.
      :type id: GridLocation

      :returns: True if location is in bounds.
      :rtype: bool


   .. py:method:: neighbours(id)

      Get valid neighbours and cost of grid location.

      :param id: Input location.
      :type id: GridLocation

      :returns: **neighbours** -- List of tuples of neighbouring locations and the costs to those locations.
      :rtype: List[Tuple[GridLocation, float]]


   .. py:method:: passable(id)

      Check if grid location is passable.

      :param id: Input location.
      :type id: GridLocation

      :returns: True if location is in passable.
      :rtype: bool


   .. py:method:: real_to_grid(id)

      Convert real coordinates to grid coordinates.

      :param id: Input location.
      :type id: RealLocation

      :returns: Corresponding GridLocation.
      :rtype: GridLocation



.. py:function:: euclidean_distance(a, b)

   Compute the Euclidean distance between points.

   :param a: First point.
   :param b: Second point.

   :returns: Euclidean distance between points.
   :rtype: float


.. py:function:: grid_to_real(id: GridLocation, scale: float) -> RealLocation
                 grid_to_real(id: GridPose, scale: float) -> RealPose

   Convert grid coordinates to real coordinates.

   :param id: Input location/pose.

   :returns: Corresponding real location/pose.
   :rtype: output


.. py:function:: real_to_grid(id: RealLocation, scale: float) -> GridLocation
                 real_to_grid(id: RealPose, scale: float) -> GridPose

   Convert real coordinates to grid coordinates.

   .. note::
       Grid coordinates are discretized. To get non discretized grid coordinates, see :meth:`real_to_grid_exact`.

   :param id: Input location/pose.

   :returns: Corresponding gird location/pose.
   :rtype: output


.. py:function:: real_to_grid_exact(id, scale)

   Convert real coordinates to grid coordinates without discretization.

   :param id: Input location.
   :param scale: Ratio of real-world unit to grid unit.

   :returns: Grid location without discretization.
   :rtype: Tuple[float, float]


.. py:function:: save_zip(dir, response)

   save a zip file from a Flask Response into a local folder.

   :param start: Absolute path of directory for extracting a Flask response's zipped contents into.
   :type start: Path
   :param response:
   :type response: Flask Response that contains a zipped file.

   :returns: Path to folder of unzipped contents.
   :rtype: output_path


.. py:function:: validate_reid_submission(answer)

   Validate string submission for ReID Friend or Foe (Visual) task.

   The expected answer is "hostage", "suspect" or "none".


.. py:function:: validate_speakerid_submission(answer)

   Validate string submission for the Friend or Foe (Audio) task.
   The expected format is <Filename of Audio File w/o file extension>_<Team Name>_<Member ID>
   e.g. "audio1_My Team Name is Great_MemberA".


